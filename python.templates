""" code_templates """

#import local file [https://stackoverflow.com/questions/2349991/how-to-import-other-python-files]
  
# docopt
"""
<description>

Usage:
  <cmd> {options}

Options:
  -h --help
  -f <log_file_name>    specify output log file
  -e <dup_file_name>    exbytes duplicates file name
  
Example:
      - defined run:
        <cmd> <options>
      - ...:
        ....
"""
from docopt import docopt
if __name__ == "__main__":
  args = docopt(__doc__)

# argparse - import argparse
parser = argparse.ArgumentParser(
  description="******",
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  argument_default=argparse.SUPPRESS,
  epilog="Examples:\n\
    cmd -h ...")
  parser.add_argument("-d", required=True, help="date of tkrmon log in New York time zone, format:  YYYYMMDD")
  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument("-x", help="Mutually exclusive with -k option", default="")
  group.add_argument("-k", help="key of a security. Mutually exclusive with -x option.", default="")

## parse the arguments using parse - arguments is from main(), will be sys.argv[1:]
namespace = parser.parse_args(args=arguments)
if namespace.m and namespace.p == "":
  parser.error("-m and -p must be given together")

# get dec number in hex:
dec_num = int(<string>, 16) - 4 numbers hex

# date to string in certain format
datetime.strftime("%Y%m%d")  20210102

# nano second, milli second
import time
time.time_ns() -- python3.7
int(time.time() * 1000)  -- python2.7, but need os support second fractions

# random function usages:
 - get a number in range: random.randrange(0,11)
 - get n non-deplicate elem in list, set: random.sample(list, n)
 - get a elem in list, set: random.choice(list)

# list to string
attrs = ",".join(machines.getAttributes(node))

# file operation
with open(jsonfile, "a") as f:
  data = json.load(f) # use import json
  for line in err:
    err.write("======== Site %s ========\n" % line)
    
# logging
logging.basicConfig(format='%(asctime)s %(levelname)s %(filename)s::%(funcName)s(%(lineno)d): %(message)s', level=logging.INFO, filename=logfile)
 - print out to console: (add a handler)
   handler = logging.StreamHandler()
   handler.setLevel(logging.INFO)
   formatter = logging.Formatter('%(asctime)s %(message)s')
   handler.setFormatter(formatter)
   logging.getLogger('').addHandler(handler)
 - sometime may need to remove preset handlers if not working:
   for handler in logging.root.handlers[:]:
       logging.root.removeHandler(handler)

# cmd running
cmd = [...,...,...]
response = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = response.communicate()
if response.returncode:
  raise Exception(stderr)
if response.returncode:
  print("CMD ERROR: " + stderr)

# string regex matching
## .... good: [**,**,**,..|]
## bad: [**,**,**,..|]
matches = re.match(r".*\n.*good:(.*)\nbad:(.*)\n", string, re.MULTILINE)
good_str = matches.group(1)
goods = good_str.split(",") if good_str else []
bad_str = matches.group(2)
bads = bad_str.split(",") if bad_str else []

# itertool powerful:
itertools.combinations(exbyte_dic.iteritems(), 2)  # permutation of combination of each two in dict

# os file system operation
## remove a file:
os.remove(log_file_path)
## split a pathname and get filename
_, name = os.path.split(filename)
## split a file name from postfix
basename, _ = os.path.splittext(name)
## form a full path name
filename = os.path.join(dir+filename)
## check file system status:
statvfs = os.statvfs(folder)
total_blk = float(statvfs.f_blocks)
free_blk = statvfs.f_bfree
free_percent = free_blk / total_blk
## get file modified time:
file_mod_time = os.stat(filename[-1]).st_mtime
## make folder:
os.makedirs(self.folder)
## recursively remove all folder:
shutil.rmtree(self.folder) # import shutil
# time op
## get current date time in string in certain format. ex. YYYYMMDD_HHMMSS string
time.strftime("%Y%m%d_%H%M%S")
## get yesterday:
yesterday = date.today() - timedelta(1)
day = yesterday.strftime("%Y%m%d")
# register logging:
logging.getLogger(<app_name>)
logging.basicConfig(format='%(asctime)s -%(levelname)s- %(message)s', level=logging.INFO, datefmt="%Y%m%d %H:%M:%S", filename=<...>, filemode='w')
## lofgilename by date:
logfilename = ()

# import a local lib dynamically:
libPath = "../"
if libPath not in sys.path:
  sys.path.append(libPath)
## then import the lib

# python unit test:
class TargetClass(unittest.TestCase)
  def setUp(self):
    # set up for all test
    pass
  def test_function(self):
    self.assertEqual(source, result)
    with self.assertRaises(Exception):
      function_couse_exception
    self.assertTrue(target)
  def tearDown(self):
    # remove or release resource
    pass
  if __name__ == '__main__':
    unittest.main()

* unittest
[http://pythontesting.net/framework/unittest/unittest-introduction/]
simple run like run regular python program:
 python test.py -v

* debuging with pdb
import pdb; pdb.set_trace()
pdb.pm()
python -m pdb myscript.py

== profiling with cProfile and pstats ==
* python -m cProfile ***.py

* python -m trace --trace test_fib.py

* python -m trace --listfuncs test_fib.py

* python -m trace --trackcalls test_fib.py

* %timeit <function want to run>

== python concept ==
* array operation
reverse travel array: for i in array[::-1]:
set join operations is faster than manual list join

* operater
a if true else b : three way operater
Iterator: when iterator is passed to the "iter" built-in function, "iter" will return the iterator itself. But when a container type is passed to "iter", a new iterator object will be returned each time.

* Inner Function
Major use for closures:
https://realpython.com/blog/python/inner-functions-what-are-they-good-for/

=== Functions ===
* Python has specific rules for comparing tuples. It first compares items in index zero, then index one, then index two, and so on.

* When you reference a variable in an expression, the Python interpreter will traverse the scope to resolve the reference in this order:
1. The current functionâ€™s scope
2. Any enclosing scopes (like other containing functions)
3. The scope of the module that contains the code (also called the global scope)
4. The built-in scope (that contains functions like len and str)
If none of these places have a defined variable with the referenced name, then a NameError exception is raised.

=== class ===
But classes are more than that in Python. Classes are objects too.
This object (the class) is itself capable of creating objects (the instances), and this is why it's a class.
super(B, self).__init__(x) to invoke A's method

But still, it's an object, and therefore:

* you can assign it to a variable
* you can copy it
* you can add attributes to it
* you can pass it as a function parameter

type(name of the class,
     tuple of the parent class (for inheritance, can be empty),
     dictionary containing attributes names and values)

in Python, classes are objects, and you can create a class on the fly, dynamically.

    # __new__ is the method called before __init__
    # it's the method that creates the object and returns it
    # while __init__ just initializes the object passed as parameter
    # you rarely use __new__, except when you want to control how the object
    # is created.
    # __call__ happend when you call a class like a function CLASS();
* __init__: not a constructor, called after instance created
* __repr__ - printable (and eval-able) represenation
* __str__ - a nicely printable representation
* __class__: the base type of the instance
* __doc__: doc

first parameter is the class, cls by convention

=== metaclass ===
metaclasses actually define the type of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. type.__subclasses__() is an example of a method on the type metaclass. You can also define the normal 'magic' methods, like __add__, __iter__ and __getattr__, to implement or change how the class behaves.

 in python 3+ the __metaclass__ doesn't exist anymore. You should declare your class like class ClassName(metaclass=MetaClass)
